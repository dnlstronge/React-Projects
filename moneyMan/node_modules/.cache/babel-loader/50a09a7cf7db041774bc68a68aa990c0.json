{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\nexport const useCollection = (collection, _query) => {\n  _s();\n  const [documents, setDocuments] = useState(null);\n  const [error, setError] = useState(null);\n\n  // fixes issue cause by using an array inside dep array (inf loop)\n  // \"_query\" is \"different\" and causes inf loop if used directly in dependency array\n\n  const query = useRef(_query).current;\n  useEffect(() => {\n    let ref = projectFirestore.collection(collection);\n    // add where\n\n    if (query) {\n      ref = ref.where(...query);\n    }\n    const unsubscribe = ref.onSnapshot(snapshot => {\n      let results = [];\n      snapshot.docs.forEach(doc => {\n        results.push({\n          ...doc.data(),\n          id: doc.id\n        });\n      });\n\n      // updates state\n      setDocuments(results);\n      setError(null);\n    }, error => {\n      console.log(error);\n      setError('Could not fetch data');\n    });\n    // cleanup/unsub\n\n    return () => unsubscribe();\n  }, [collection, query]);\n  return {\n    documents,\n    error\n  };\n};\n\n// Houston we have Problem: would this not cause infinite cycle of rerender\n// due to an array reference type? i.e JS will see query as different and because\n// there is a diff to something in the dep array useEffect would fire again and again......\n// useRef to get arround this? rename query and wrap using useref, store that in var called query\n_s(useCollection, \"xf9SNyOG/0TFqQMMRkqv1KrNnqg=\");","map":{"version":3,"names":["useEffect","useState","useRef","projectFirestore","useCollection","collection","_query","documents","setDocuments","error","setError","query","current","ref","where","unsubscribe","onSnapshot","snapshot","results","docs","forEach","doc","push","data","id","console","log"],"sources":["/home/dnlstronge/ReactP/moneyMan/src/hooks/useCollection.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\"\nimport { projectFirestore } from \"../firebase/config\"\n\n\nexport const useCollection = (collection, _query) => {\n    const [ documents, setDocuments ] = useState(null)\n    const [ error, setError ] = useState(null)\n\n// fixes issue cause by using an array inside dep array (inf loop)\n// \"_query\" is \"different\" and causes inf loop if used directly in dependency array\n\n    const query = useRef(_query).current\n\n\n    useEffect(() => {\n        let ref = projectFirestore.collection(collection)\n// add where\n\n        if (query) {\n            ref = ref.where(...query)\n        }\n\n        const unsubscribe = ref.onSnapshot( (snapshot) => {\n            let results = []\n            snapshot.docs.forEach( doc => {\n                results.push({...doc.data(), id: doc.id })\n            })\n\n            // updates state\n            setDocuments(results)\n            setError(null)\n        }, (error) => {\n            console.log(error)\n            setError('Could not fetch data')\n        })\n            // cleanup/unsub\n        \n            return () => unsubscribe()\n\n\n    }, [collection, query])\n\n    return {documents, error}\n}\n\n// Houston we have Problem: would this not cause infinite cycle of rerender\n// due to an array reference type? i.e JS will see query as different and because\n// there is a diff to something in the dep array useEffect would fire again and again......\n// useRef to get arround this? rename query and wrap using useref, store that in var called query"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,gBAAgB,QAAQ,oBAAoB;AAGrD,OAAO,MAAMC,aAAa,GAAG,CAACC,UAAU,EAAEC,MAAM,KAAK;EAAA;EACjD,MAAM,CAAEC,SAAS,EAAEC,YAAY,CAAE,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAEQ,KAAK,EAAEC,QAAQ,CAAE,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACA;;EAEI,MAAMU,KAAK,GAAGT,MAAM,CAACI,MAAM,CAAC,CAACM,OAAO;EAGpCZ,SAAS,CAAC,MAAM;IACZ,IAAIa,GAAG,GAAGV,gBAAgB,CAACE,UAAU,CAACA,UAAU,CAAC;IACzD;;IAEQ,IAAIM,KAAK,EAAE;MACPE,GAAG,GAAGA,GAAG,CAACC,KAAK,CAAC,GAAGH,KAAK,CAAC;IAC7B;IAEA,MAAMI,WAAW,GAAGF,GAAG,CAACG,UAAU,CAAGC,QAAQ,IAAK;MAC9C,IAAIC,OAAO,GAAG,EAAE;MAChBD,QAAQ,CAACE,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAI;QAC1BH,OAAO,CAACI,IAAI,CAAC;UAAC,GAAGD,GAAG,CAACE,IAAI,EAAE;UAAEC,EAAE,EAAEH,GAAG,CAACG;QAAG,CAAC,CAAC;MAC9C,CAAC,CAAC;;MAEF;MACAhB,YAAY,CAACU,OAAO,CAAC;MACrBR,QAAQ,CAAC,IAAI,CAAC;IAClB,CAAC,EAAGD,KAAK,IAAK;MACVgB,OAAO,CAACC,GAAG,CAACjB,KAAK,CAAC;MAClBC,QAAQ,CAAC,sBAAsB,CAAC;IACpC,CAAC,CAAC;IACE;;IAEA,OAAO,MAAMK,WAAW,EAAE;EAGlC,CAAC,EAAE,CAACV,UAAU,EAAEM,KAAK,CAAC,CAAC;EAEvB,OAAO;IAACJ,SAAS;IAAEE;EAAK,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AAAA,GA5CaL,aAAa"},"metadata":{},"sourceType":"module"}
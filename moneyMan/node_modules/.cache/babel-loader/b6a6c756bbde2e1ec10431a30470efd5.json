{"ast":null,"code":"import { __assign, __values, __read, __awaiter, __generator, __spreadArray } from 'tslib';\nimport { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\nvar Component = /** @class */function () {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  function Component(name, instanceFactory, type) {\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\" /* LAZY */;\n    this.onInstanceCreated = null;\n  }\n  Component.prototype.setInstantiationMode = function (mode) {\n    this.instantiationMode = mode;\n    return this;\n  };\n  Component.prototype.setMultipleInstances = function (multipleInstances) {\n    this.multipleInstances = multipleInstances;\n    return this;\n  };\n  Component.prototype.setServiceProps = function (props) {\n    this.serviceProps = props;\n    return this;\n  };\n  Component.prototype.setInstanceCreatedCallback = function (callback) {\n    this.onInstanceCreated = callback;\n    return this;\n  };\n  return Component;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\nvar Provider = /** @class */function () {\n  function Provider(name, container) {\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n    this.onInitCallbacks = new Set();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n  Provider.prototype.get = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    // if multipleInstances is not supported, use the default name\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      var deferred = new Deferred();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        // initialize the service if it can be auto-initialized\n        try {\n          var instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n    return this.instancesDeferred.get(normalizedIdentifier).promise;\n  };\n  Provider.prototype.getImmediate = function (options) {\n    var _a = __assign({\n        identifier: DEFAULT_ENTRY_NAME,\n        optional: false\n      }, options),\n      identifier = _a.identifier,\n      optional = _a.optional;\n    // if multipleInstances is not supported, use the default name\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(\"Service \" + this.name + \" is not available\");\n      }\n    }\n  };\n  Provider.prototype.getComponent = function () {\n    return this.component;\n  };\n  Provider.prototype.setComponent = function (component) {\n    var e_1, _a;\n    if (component.name !== this.name) {\n      throw Error(\"Mismatching Component \" + component.name + \" for Provider \" + this.name + \".\");\n    }\n    if (this.component) {\n      throw Error(\"Component for \" + this.name + \" has already been provided\");\n    }\n    this.component = component;\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({\n          instanceIdentifier: DEFAULT_ENTRY_NAME\n        });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n    try {\n      // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n      for (var _b = __values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n          instanceIdentifier = _d[0],\n          instanceDeferred = _d[1];\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n        try {\n          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n          var instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          instanceDeferred.resolve(instance);\n        } catch (e) {\n          // when the instance factory throws an exception, it should not cause\n          // a fatal error. We just leave the promise unresolved.\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  Provider.prototype.clearInstance = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    this.instancesDeferred.delete(identifier);\n    this.instances.delete(identifier);\n  };\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  Provider.prototype.delete = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var services;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            services = Array.from(this.instances.values());\n            return [4 /*yield*/, Promise.all(__spreadArray(__spreadArray([], __read(services.filter(function (service) {\n              return 'INTERNAL' in service;\n            }) // legacy services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service.INTERNAL.delete();\n            }))), __read(services.filter(function (service) {\n              return '_delete' in service;\n            }) // modularized services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service._delete();\n            }))))];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  Provider.prototype.isComponentSet = function () {\n    return this.component != null;\n  };\n  Provider.prototype.isInitialized = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    return this.instances.has(identifier);\n  };\n  Provider.prototype.initialize = function (opts) {\n    var e_2, _a;\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _b = opts.instanceIdentifier,\n      instanceIdentifier = _b === void 0 ? DEFAULT_ENTRY_NAME : _b,\n      _c = opts.options,\n      options = _c === void 0 ? {} : _c;\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(this.name + \"(\" + normalizedIdentifier + \") has already been initialized\");\n    }\n    if (!this.isComponentSet()) {\n      throw Error(\"Component \" + this.name + \" has not been registered yet\");\n    }\n    var instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options: options\n    });\n    try {\n      // resolve any pending promise waiting for the service instance\n      for (var _d = __values(this.instancesDeferred.entries()), _e = _d.next(); !_e.done; _e = _d.next()) {\n        var _f = __read(_e.value, 2),\n          instanceIdentifier_1 = _f[0],\n          instanceDeferred = _f[1];\n        var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier_1);\n        if (normalizedIdentifier === normalizedDeferredIdentifier) {\n          instanceDeferred.resolve(instance);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    this.invokeOnInitCallbacks(instance, normalizedIdentifier);\n    return instance;\n  };\n  /**\r\n   *\r\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n   *\r\n   * @returns a function to unregister the callback\r\n   */\n  Provider.prototype.onInit = function (callback) {\n    var _this = this;\n    this.onInitCallbacks.add(callback);\n    return function () {\n      _this.onInitCallbacks.delete(callback);\n    };\n  };\n  /**\r\n   * Invoke onInit callbacks synchronously\r\n   * @param instance the service instance`\r\n   */\n  Provider.prototype.invokeOnInitCallbacks = function (instance, identifier) {\n    var e_3, _a;\n    try {\n      for (var _b = __values(this.onInitCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var callback = _c.value;\n        try {\n          callback(instance, identifier);\n        } catch (_d) {\n          // ignore errors in the onInit callback\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  Provider.prototype.getOrInitializeService = function (_a) {\n    var instanceIdentifier = _a.instanceIdentifier,\n      _b = _a.options,\n      options = _b === void 0 ? {} : _b;\n    var instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options: options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      /**\r\n       * Order is important\r\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n       * makes `isInitialized()` return true.\r\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n        } catch (_c) {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n    return instance || null;\n  };\n  Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  };\n\n  Provider.prototype.shouldAutoInitialize = function () {\n    return !!this.component && this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */;\n  };\n\n  return Provider;\n}();\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\" /* EAGER */;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\nvar ComponentContainer = /** @class */function () {\n  function ComponentContainer(name) {\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n  ComponentContainer.prototype.addComponent = function (component) {\n    var provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\"Component \" + component.name + \" has already been registered with \" + this.name);\n    }\n    provider.setComponent(component);\n  };\n  ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\n    var provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n    this.addComponent(component);\n  };\n  /**\r\n   * getProvider provides a type safe interface where it can only be called with a field name\r\n   * present in NameServiceMapping interface.\r\n   *\r\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n   * themselves.\r\n   */\n  ComponentContainer.prototype.getProvider = function (name) {\n    if (this.providers.has(name)) {\n      return this.providers.get(name);\n    }\n    // create a Provider for a service that hasn't registered with Firebase\n    var provider = new Provider(name, this);\n    this.providers.set(name, provider);\n    return provider;\n  };\n  ComponentContainer.prototype.getProviders = function () {\n    return Array.from(this.providers.values());\n  };\n  return ComponentContainer;\n}();\nexport { Component, ComponentContainer, Provider };","map":{"version":3,"mappings":"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","names":["name","instanceFactory","type","Component","mode","instantiationMode","multipleInstances","props","serviceProps","callback","onInstanceCreated","DEFAULT_ENTRY_NAME","container","Map","Set","Provider","identifier","normalizedIdentifier","normalizeInstanceIdentifier","instancesDeferred","has","deferred","Deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","resolve","e","get","promise","options","optional","Error","component","isComponentEager","entries","instanceDeferred","delete","instances","services","Array","from","values","Promise","all","filter","service","map","INTERNAL","_delete","_a","opts","_c","isComponentSet","instanceIdentifier_1","normalizedDeferredIdentifier","invokeOnInitCallbacks","onInitCallbacks","add","_this","_b","normalizeIdentifierForFactory","undefined","ComponentContainer","provider","getProvider","setComponent","providers","addComponent"],"sources":["../src/component.ts","../src/constants.ts","../src/provider.ts","../src/component_container.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private onInitCallbacks: Set<OnInitCallBack<T>> = new Set();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier: string = DEFAULT_ENTRY_NAME): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    const { identifier, optional } = {\n      identifier: DEFAULT_ENTRY_NAME,\n      optional: false,\n      ...options\n    };\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(\n        instanceIdentifier\n      );\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { instanceIdentifier = DEFAULT_ENTRY_NAME, options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(\n        instanceIdentifier\n      );\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    this.invokeOnInitCallbacks(instance, normalizedIdentifier);\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>): () => void {\n    this.onInitCallbacks.add(callback);\n\n    return () => {\n      this.onInitCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    for (const callback of this.onInitCallbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(identifier: string): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return (this.providers.get(name) as unknown) as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, (provider as unknown) as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}